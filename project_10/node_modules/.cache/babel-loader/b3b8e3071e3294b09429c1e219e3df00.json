{"ast":null,"code":"export default class FormValidator {\n  constructor(settings, formToValidate) {\n    this._form = formToValidate;\n\n    this._setSettings(settings);\n  }\n\n  _setSettings(settings) {\n    this._formSelector = settings.formSelector;\n    this._inputSelector = settings.inputSelector;\n    this._submitButtonSelector = settings.submitButtonSelector;\n    this._inactiveButtonClass = settings.inactiveButtonClass;\n    this._inputErrorClass = settings.inputErrorClass;\n    this._errorClass = settings.errorClass;\n    this._submitButton = this._form.querySelector(this._submitButtonSelector);\n    this._inputs = [...this._form.querySelectorAll(this._inputSelector)];\n  }\n\n  enableValidation() {\n    if (this._formSelector) {\n      this._form.addEventListener(\"submit\", e => e.preventDefault());\n\n      this._inputs.forEach(inputElement => {\n        inputElement.addEventListener(\"input\", evt => {\n          this._handleInputEvent(evt.target);\n\n          this.validateButton();\n        });\n      });\n    }\n  } // ! this function handles the error massage state according to the input validity\n\n\n  _handleInputEvent(inputElement) {\n    const errorMessage = inputElement.parentElement.querySelector(`.${inputElement.id}-error`);\n\n    if (this._checkInputValidity(inputElement)) {\n      this._hideErrorMessage(errorMessage, this._errorClass);\n\n      inputElement.classList.remove(this._inputErrorClass);\n    } else {\n      this._showErrorMessage(errorMessage, this._errorClass);\n\n      inputElement.classList.add(this._inputErrorClass);\n    }\n  } // ! this function checkes if the form is valid\n\n\n  _checkFormValidity() {\n    let isValid = true;\n\n    for (let i = 0; i < this._inputs.length; i++) {\n      if (!this._checkInputValidity(this._inputs[i])) {\n        isValid = false;\n      }\n    }\n\n    return isValid;\n  } // ! this function hides the error massage\n\n\n  _hideErrorMessage(errorMessage) {\n    errorMessage.classList.remove(this._errorClass);\n  } // ! this function shows the error massage\n\n\n  _showErrorMessage(errorMessage) {\n    errorMessage.classList.add(this._errorClass);\n  } // ! this function handles the button state according to the form validity\n\n\n  validateButton() {\n    if (this._checkFormValidity()) {\n      this.toggleButtonState(true);\n    } else {\n      this.toggleButtonState(false);\n    }\n  } // ! this function checkes if the input is valid\n\n\n  _checkInputValidity(inputElement) {\n    return inputElement.validity.valid;\n  } // ! this function toggles button state\n\n\n  toggleButtonState(isValid) {\n    if (isValid) {\n      this._submitButton.classList.remove(this._inactiveButtonClass);\n\n      this._submitButton.disabled = false;\n    } else {\n      this._submitButton.classList.add(this._inactiveButtonClass);\n\n      this._submitButton.disabled = true;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/minka/OneDrive/Desktop/dev/around-react/project_10/src/components/FormValidator.js"],"names":["FormValidator","constructor","settings","formToValidate","_form","_setSettings","_formSelector","formSelector","_inputSelector","inputSelector","_submitButtonSelector","submitButtonSelector","_inactiveButtonClass","inactiveButtonClass","_inputErrorClass","inputErrorClass","_errorClass","errorClass","_submitButton","querySelector","_inputs","querySelectorAll","enableValidation","addEventListener","e","preventDefault","forEach","inputElement","evt","_handleInputEvent","target","validateButton","errorMessage","parentElement","id","_checkInputValidity","_hideErrorMessage","classList","remove","_showErrorMessage","add","_checkFormValidity","isValid","i","length","toggleButtonState","validity","valid","disabled"],"mappings":"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","sourcesContent":["export default class FormValidator {\r\n    constructor(settings, formToValidate) {\r\n        this._form = formToValidate;\r\n        this._setSettings(settings);\r\n    }\r\n\r\n    _setSettings(settings) {\r\n        this._formSelector = settings.formSelector;\r\n        this._inputSelector = settings.inputSelector;\r\n        this._submitButtonSelector = settings.submitButtonSelector;\r\n        this._inactiveButtonClass = settings.inactiveButtonClass;\r\n        this._inputErrorClass = settings.inputErrorClass;\r\n        this._errorClass = settings.errorClass;\r\n        this._submitButton = this._form.querySelector(this._submitButtonSelector);\r\n        this._inputs = [...this._form.querySelectorAll(this._inputSelector)];\r\n    }\r\n\r\n    enableValidation() {\r\n        if (this._formSelector) {\r\n            this._form.addEventListener(\"submit\", (e) => e.preventDefault());\r\n            this._inputs.forEach((inputElement) => {\r\n                inputElement.addEventListener(\"input\", (evt) => {\r\n                    this._handleInputEvent(evt.target);\r\n                    this.validateButton();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    // ! this function handles the error massage state according to the input validity\r\n    _handleInputEvent(inputElement) {\r\n        const errorMessage = inputElement.parentElement.querySelector(`.${inputElement.id}-error`);\r\n\r\n        if (this._checkInputValidity(inputElement)) {\r\n            this._hideErrorMessage(errorMessage, this._errorClass);\r\n            inputElement.classList.remove(this._inputErrorClass);\r\n        } else {\r\n            this._showErrorMessage(errorMessage, this._errorClass);\r\n            inputElement.classList.add(this._inputErrorClass);\r\n        }\r\n    }\r\n\r\n    // ! this function checkes if the form is valid\r\n    _checkFormValidity() {\r\n            let isValid = true;\r\n            for (let i = 0; i < this._inputs.length; i++) {\r\n                if (!this._checkInputValidity(this._inputs[i])) {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            return isValid;\r\n        }\r\n        // ! this function hides the error massage\r\n    _hideErrorMessage(errorMessage) {\r\n        errorMessage.classList.remove(this._errorClass);\r\n    }\r\n\r\n    // ! this function shows the error massage\r\n    _showErrorMessage(errorMessage) {\r\n        errorMessage.classList.add(this._errorClass);\r\n    }\r\n\r\n    // ! this function handles the button state according to the form validity\r\n    validateButton() {\r\n        if (this._checkFormValidity()) {\r\n            this.toggleButtonState(true);\r\n        } else {\r\n            this.toggleButtonState(false);\r\n        }\r\n    }\r\n\r\n    // ! this function checkes if the input is valid\r\n    _checkInputValidity(inputElement) {\r\n        return inputElement.validity.valid;\r\n    }\r\n\r\n    // ! this function toggles button state\r\n    toggleButtonState(isValid) {\r\n        if (isValid) {\r\n            this._submitButton.classList.remove(this._inactiveButtonClass);\r\n            this._submitButton.disabled = false;\r\n        } else {\r\n            this._submitButton.classList.add(this._inactiveButtonClass);\r\n            this._submitButton.disabled = true;\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}