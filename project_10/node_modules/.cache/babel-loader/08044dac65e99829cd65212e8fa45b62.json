{"ast":null,"code":"'use strict';\n\nlet Container = require('./container');\n\nlet LazyResult, Processor;\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({\n      type: 'document',\n      ...defaults\n    });\n\n    if (!this.nodes) {\n      this.nodes = [];\n    }\n  }\n\n  toResult() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  }\n\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant;\n};\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant;\n};\n\nmodule.exports = Document;\nDocument.default = Document;","map":{"version":3,"sources":["C:/Users/minka/OneDrive/Desktop/dev/around-react/project_10/node_modules/postcss/lib/document.js"],"names":["Container","require","LazyResult","Processor","Document","constructor","defaults","type","nodes","toResult","opts","lazy","stringify","registerLazyResult","dependant","registerProcessor","module","exports","default"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,UAAJ,EAAgBC,SAAhB;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC/BK,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB;AACA,UAAM;AAAEC,MAAAA,IAAI,EAAE,UAAR;AAAoB,SAAGD;AAAvB,KAAN;;AAEA,QAAI,CAAC,KAAKE,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAa,EAAb;AACD;AACF;;AAEDC,EAAAA,QAAQ,GAAY;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAClB,QAAIC,IAAI,GAAG,IAAIT,UAAJ,CAAe,IAAIC,SAAJ,EAAf,EAAgC,IAAhC,EAAsCO,IAAtC,CAAX;AAEA,WAAOC,IAAI,CAACC,SAAL,EAAP;AACD;;AAd8B;;AAiBjCR,QAAQ,CAACS,kBAAT,GAA8BC,SAAS,IAAI;AACzCZ,EAAAA,UAAU,GAAGY,SAAb;AACD,CAFD;;AAIAV,QAAQ,CAACW,iBAAT,GAA6BD,SAAS,IAAI;AACxCX,EAAAA,SAAS,GAAGW,SAAZ;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBb,QAAjB;AACAA,QAAQ,CAACc,OAAT,GAAmBd,QAAnB","sourcesContent":["'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n"]},"metadata":{},"sourceType":"script"}