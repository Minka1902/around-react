{"ast":null,"code":"'use strict';\n\nlet Container = require('./container');\n\nlet LazyResult, Processor;\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults);\n    this.type = 'root';\n    if (!this.nodes) this.nodes = [];\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child);\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before;\n    }\n\n    return super.removeChild(child);\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child);\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before;\n        } else {\n          delete sample.raws.before;\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before;\n        }\n      }\n    }\n\n    return nodes;\n  }\n\n  toResult() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let lazy = new LazyResult(new Processor(), this, opts);\n    return lazy.stringify();\n  }\n\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant;\n};\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant;\n};\n\nmodule.exports = Root;\nRoot.default = Root;","map":{"version":3,"sources":["C:/Users/minka/OneDrive/Desktop/dev/around-react/project_10/node_modules/postcss/lib/root.js"],"names":["Container","require","LazyResult","Processor","Root","constructor","defaults","type","nodes","removeChild","child","ignore","index","length","raws","before","normalize","sample","first","node","toResult","opts","lazy","stringify","registerLazyResult","dependant","registerProcessor","module","exports","default"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,UAAJ,EAAgBC,SAAhB;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAC3BK,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UAAMA,QAAN;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,QAAI,CAAC,KAAKC,KAAV,EAAiB,KAAKA,KAAL,GAAa,EAAb;AAClB;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzB,QAAIC,KAAK,GAAG,KAAKA,KAAL,CAAWF,KAAX,CAAZ;;AAEA,QAAI,CAACC,MAAD,IAAWC,KAAK,KAAK,CAArB,IAA0B,KAAKJ,KAAL,CAAWK,MAAX,GAAoB,CAAlD,EAAqD;AACnD,WAAKL,KAAL,CAAW,CAAX,EAAcM,IAAd,CAAmBC,MAAnB,GAA4B,KAAKP,KAAL,CAAWI,KAAX,EAAkBE,IAAlB,CAAuBC,MAAnD;AACD;;AAED,WAAO,MAAMN,WAAN,CAAkBC,KAAlB,CAAP;AACD;;AAEDM,EAAAA,SAAS,CAACN,KAAD,EAAQO,MAAR,EAAgBV,IAAhB,EAAsB;AAC7B,QAAIC,KAAK,GAAG,MAAMQ,SAAN,CAAgBN,KAAhB,CAAZ;;AAEA,QAAIO,MAAJ,EAAY;AACV,UAAIV,IAAI,KAAK,SAAb,EAAwB;AACtB,YAAI,KAAKC,KAAL,CAAWK,MAAX,GAAoB,CAAxB,EAA2B;AACzBI,UAAAA,MAAM,CAACH,IAAP,CAAYC,MAAZ,GAAqB,KAAKP,KAAL,CAAW,CAAX,EAAcM,IAAd,CAAmBC,MAAxC;AACD,SAFD,MAEO;AACL,iBAAOE,MAAM,CAACH,IAAP,CAAYC,MAAnB;AACD;AACF,OAND,MAMO,IAAI,KAAKG,KAAL,KAAeD,MAAnB,EAA2B;AAChC,aAAK,IAAIE,IAAT,IAAiBX,KAAjB,EAAwB;AACtBW,UAAAA,IAAI,CAACL,IAAL,CAAUC,MAAV,GAAmBE,MAAM,CAACH,IAAP,CAAYC,MAA/B;AACD;AACF;AACF;;AAED,WAAOP,KAAP;AACD;;AAEDY,EAAAA,QAAQ,GAAY;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAClB,QAAIC,IAAI,GAAG,IAAIpB,UAAJ,CAAe,IAAIC,SAAJ,EAAf,EAAgC,IAAhC,EAAsCkB,IAAtC,CAAX;AACA,WAAOC,IAAI,CAACC,SAAL,EAAP;AACD;;AAxC0B;;AA2C7BnB,IAAI,CAACoB,kBAAL,GAA0BC,SAAS,IAAI;AACrCvB,EAAAA,UAAU,GAAGuB,SAAb;AACD,CAFD;;AAIArB,IAAI,CAACsB,iBAAL,GAAyBD,SAAS,IAAI;AACpCtB,EAAAA,SAAS,GAAGsB,SAAZ;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBxB,IAAjB;AACAA,IAAI,CAACyB,OAAL,GAAezB,IAAf","sourcesContent":["'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n"]},"metadata":{},"sourceType":"script"}